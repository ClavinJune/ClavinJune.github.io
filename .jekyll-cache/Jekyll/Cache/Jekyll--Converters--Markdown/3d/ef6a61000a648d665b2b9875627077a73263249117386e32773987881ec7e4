I"U<p>Data serialization library in Java could be varied. You can use Jackson, GSON, or anything else. Since there are too many serialization libraries out there, it’s quite tricky to manage Java class attribute exclusion during serialization. Each library might have their own way to exclude the Java class attribute. Each Java project should only have 1 serialization library in order to maintain the standardization but, what if somehow in someway you need more than one serialization library?</p>

<p>Here comes <code class="language-plaintext highlighter-rouge">transient modifier</code> that helps you manage the java class attribute exclusion during serialization in language level. There’s no need to memorize unique annotation like</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Expose</span><span class="o">(</span><span class="n">serialize</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">deserialize</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
</code></pre></div></div>

<p>or</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@JsonIgnore</span>
</code></pre></div></div>

<p>You can only use <code class="language-plaintext highlighter-rouge">transient</code> keyword as your attribute modifier. Let’s try it.</p>

<h2 id="sample-class">Sample Class</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Jackson need this annotation</span>
<span class="c1">// because it can't deserialize unknown properties. duh!</span>
<span class="nd">@JsonIgnoreProperties</span><span class="o">(</span><span class="n">ignoreUnknown</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Sample</span> <span class="o">{</span>
  <span class="c1">// using transient modifier on foo</span>
  <span class="kd">public</span> <span class="kd">transient</span> <span class="nc">String</span> <span class="n">foo</span><span class="o">;</span>
  <span class="kd">public</span> <span class="nc">String</span> <span class="n">bar</span><span class="o">;</span>

  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="s">"Sample{"</span> <span class="o">+</span>
        <span class="s">"foo='"</span> <span class="o">+</span> <span class="n">foo</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span>
        <span class="s">", bar='"</span> <span class="o">+</span> <span class="n">bar</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span>
        <span class="sc">'}'</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">json</span> <span class="o">=</span> <span class="s">"{\"foo\":\"foox\",\"bar\":\"barx\"}"</span><span class="o">;</span>

    <span class="c1">// by default jackson not reading any attribute,</span>
    <span class="c1">// jackson only read public default Getter</span>
    <span class="c1">// so jackson need to have this configuration to mark transient attributes</span>
    <span class="nc">ObjectMapper</span> <span class="n">jackson</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ObjectMapper</span><span class="o">()</span>
        <span class="o">.</span><span class="na">configure</span><span class="o">(</span><span class="nc">MapperFeature</span><span class="o">.</span><span class="na">PROPAGATE_TRANSIENT_MARKER</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
    <span class="nc">Gson</span> <span class="n">gson</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Gson</span><span class="o">();</span>

    <span class="nc">Sample</span> <span class="n">byJackson</span> <span class="o">=</span> <span class="n">jackson</span><span class="o">.</span><span class="na">readValue</span><span class="o">(</span><span class="n">json</span><span class="o">,</span> <span class="nc">Sample</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="nc">Sample</span> <span class="n">byGson</span> <span class="o">=</span> <span class="n">gson</span><span class="o">.</span><span class="na">fromJson</span><span class="o">(</span><span class="n">json</span><span class="o">,</span> <span class="nc">Sample</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"deserialization by jackson: "</span> <span class="o">+</span> <span class="n">byJackson</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"deserialization by gson: "</span> <span class="o">+</span> <span class="n">byGson</span><span class="o">);</span>

    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"serialization by gson: "</span> <span class="o">+</span> <span class="n">gson</span><span class="o">.</span><span class="na">toJson</span><span class="o">(</span><span class="n">byGson</span><span class="o">));</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"serialization by jackson: "</span> <span class="o">+</span> <span class="n">jackson</span><span class="o">.</span><span class="na">writeValueAsString</span><span class="o">(</span><span class="n">byJackson</span><span class="o">));</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="output">output</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>deserialization by jackson: Sample{foo='null', bar='barx'}
deserialization by gson: Sample{foo='null', bar='barx'}
serialization by gson: {"bar":"barx"}
serialization by jackson: {"bar":"barx"}
</code></pre></div></div>

<p>Yep, as we expect, foo attribute isn’t serialized. <code class="language-plaintext highlighter-rouge">transient</code> modifier would work just fine as long as the attribute itself has no <code class="language-plaintext highlighter-rouge">static</code> or <code class="language-plaintext highlighter-rouge">final</code> modifier. Whenever a <code class="language-plaintext highlighter-rouge">transient</code> attribute has <code class="language-plaintext highlighter-rouge">static</code> or <code class="language-plaintext highlighter-rouge">final</code> modifier, the <code class="language-plaintext highlighter-rouge">transient</code> modifier has no effect on that attribute.</p>

<p>Thank you for reading!</p>
:ET