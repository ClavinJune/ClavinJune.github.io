{"version":3,"sources":["components/NavigationDot/style.module.scss","pages/index.tsx","components/NavigationDot/index.tsx","serviceWorker.ts","index.tsx","App.tsx"],"names":["module","exports","lazy","TotalPage","useState","page","setPage","useEffect","scrollHandler","Math","round","window","pageYOffset","innerHeight","addEventListener","removeEventListener","className","Style","NavigationDot","Array","keys","map","idx","active","inactive","key","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","innerWidth","width","setWidth","resizeHandler","Pages","Page","fallback","random","length","document","getElementById","URL","process","href","origin","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"6EACAA,EAAOC,QAAU,CAAC,cAAgB,6BAA6B,OAAS,sBAAsB,SAAW,0B,iJCC1F,GACbC,gBAAK,kBAAM,gCACXA,gBAAK,kBAAM,sDACXA,gBAAK,kBAAM,iC,uBCEE,cAAoC,IAAjCC,EAAgC,EAAhCA,UAAgC,EACxBC,mBAAS,GADe,mBACzCC,EADyC,KACnCC,EADmC,KAWhD,OARAC,qBAAU,WACR,IAAMC,EAA+B,kBAAMF,EAAQG,KAAKC,MAAMC,OAAOC,YAAcD,OAAOE,eAI1F,OAHAF,OAAOG,iBAAiB,SAAUN,GAG3B,kBAAMG,OAAOI,oBAAoB,SAAUP,MACjD,CAACH,IAGF,yBAAKW,UAAWC,IAAMC,eAElB,YAAIC,MAAMhB,GAAWiB,QAAQC,KAAI,SAAAC,GAC/B,IAAIN,EAAoBX,IAASiB,EAAML,IAAMM,OAASN,IAAMO,SAE5D,OAAO,0BAAMC,IAAKH,EAAKN,UAAWA,SCZtCU,EAAcC,QACW,cAA7BhB,OAAOiB,SAASC,UAEe,UAA7BlB,OAAOiB,SAASC,UAEhBlB,OAAOiB,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MClGjEC,IAASC,OAAO,mBCFD,WAAO,IAAD,EACOhD,mBAASO,OAAO0C,YADvB,mBACZC,EADY,KACLC,EADK,KAYnB,OATAhD,qBAAU,WACR,IAAMiD,EAA+B,kBAAMD,EAAS5C,OAAO0C,aAK3D,OAHA1C,OAAOG,iBAAiB,SAAU0C,GAG3B,kBAAM7C,OAAOI,oBAAoB,SAAUyC,MACjD,CAACF,IAGF,6BAEIG,EAAMpC,KAAI,SAAAqC,GAAI,OACZ,kBAAC,WAAD,CAAUC,UAAQ,EAAClC,IAAKhB,KAAKmD,UAC3B,kBAACF,EAAD,UAMJJ,EAAQ,IAAM,kBAACpC,EAAD,CAAef,UAAWsD,EAAMI,SAAa,QDrBnD,MAASC,SAASC,eAAe,SDqB1C,SAAkB9B,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAI8B,IACnBC,GACDtD,OAAOiB,SAASsC,MAEJC,SAAWxD,OAAOiB,SAASuC,OAIvC,OAGFxD,OAAOG,iBAAiB,QAAQ,WAC9B,IAAMkB,EAAK,UAAMiC,GAAN,sBAEPvC,IAgEV,SAAiCM,EAAeC,GAE9CmC,MAAMpC,GACHK,MAAK,SAAAgC,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5CxC,UAAUC,cAAcwC,MAAMtC,MAAK,SAAAC,GACjCA,EAAasC,aAAavC,MAAK,WAC7B1B,OAAOiB,SAASiD,eAKpB9C,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEArFAgC,CAAwB9C,EAAOC,GAI/BC,UAAUC,cAAcwC,MAAMtC,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OC/C/BE,K","file":"static/js/main.a831a96e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavigationDot\":\"style_NavigationDot__2-V-R\",\"active\":\"style_active__1rnOJ\",\"inactive\":\"style_inactive__1gNo0\"};","import { lazy } from 'react';\n\nexport default [\n  lazy(() => import('./Home')),\n  lazy(() => import('./About')),\n  lazy(() => import('./UnderDevelopment'))\n]","import React, { useState, useEffect } from 'react'\nimport Style from './style.module.scss'\n\ninterface INavigationDot {\n  TotalPage: number\n}\n\nexport default ({ TotalPage }: INavigationDot) => {\n  const [page, setPage] = useState(0)\n\n  useEffect(() => {\n    const scrollHandler: EventListener = () => setPage(Math.round(window.pageYOffset / window.innerHeight))\n    window.addEventListener('scroll', scrollHandler)\n\n    // cleanup function\n    return () => window.removeEventListener('scroll', scrollHandler)\n  }, [page])\n\n  return (\n    <div className={Style.NavigationDot}>\n      {\n        [...Array(TotalPage).keys()].map(idx => {\n          let className: string = page === idx ? Style.active : Style.inactive\n          \n          return <span key={idx} className={className}></span>\n        })\n      }\n    </div>\n  )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.module.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","import React, { Suspense, useState, useEffect } from 'react'\nimport Pages from './pages'\nimport NavigationDot from './components/NavigationDot'\n\nexport default () => {\n  const [width, setWidth] = useState(window.innerWidth)\n\n  useEffect(() => {\n    const resizeHandler: EventListener = () => setWidth(window.innerWidth)\n\n    window.addEventListener('resize', resizeHandler)\n\n    // clean up function\n    return () => window.removeEventListener('resize', resizeHandler)\n  }, [width])\n\n  return (\n    <div>\n      {\n        Pages.map(Page => (\n          <Suspense fallback key={Math.random()}>\n            <Page/>\n          </Suspense>\n        ))\n      }\n\n      {\n        width > 640 ? <NavigationDot TotalPage={Pages.length} /> : null\n      }\n      \n    </div>\n  )\n}"],"sourceRoot":""}